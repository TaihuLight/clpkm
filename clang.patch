diff --git a/include/clang/AST/Expr.h b/include/clang/AST/Expr.h
index 56b99cc..8acd8d7 100644
--- a/include/clang/AST/Expr.h
+++ b/include/clang/AST/Expr.h
@@ -104,6 +104,7 @@ struct SubobjectAdjustment {
 ///
 class Expr : public Stmt {
   QualType TR;
+  SourceLocation SemiLoc;
 
 protected:
   Expr(StmtClass SC, QualType T, ExprValueKind VK, ExprObjectKind OK,
@@ -137,6 +138,10 @@ public:
     TR = t;
   }
 
+  void setSemiLoc(SourceLocation SL) { SemiLoc = SL; }
+  SourceLocation getSemiLoc(void) const { return SemiLoc; }
+  SourceLocation getStmtLocEnd(void) const { return SemiLoc; }
+
   /// isValueDependent - Determines whether this expression is
   /// value-dependent (C++ [temp.dep.constexpr]). For example, the
   /// array bound of "Chars" in the following example is
diff --git a/include/clang/AST/Stmt.h b/include/clang/AST/Stmt.h
index e28675d..62a5a36 100644
--- a/include/clang/AST/Stmt.h
+++ b/include/clang/AST/Stmt.h
@@ -358,6 +358,9 @@ public:
   SourceLocation getLocStart() const LLVM_READONLY;
   SourceLocation getLocEnd() const LLVM_READONLY;
 
+  // Similar to getLocEnd, but also includes the following semicolon.
+  SourceLocation getStmtLocEnd() const LLVM_READONLY;
+
   // global temp stats (until we have a per-module visitor)
   static void addStmtClass(const StmtClass s);
   static void EnableStatistics();
@@ -475,6 +478,7 @@ public:
 
   SourceLocation getLocStart() const LLVM_READONLY { return StartLoc; }
   SourceLocation getLocEnd() const LLVM_READONLY { return EndLoc; }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY { return EndLoc; }
 
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == DeclStmtClass;
@@ -536,6 +540,7 @@ public:
 
   SourceLocation getLocStart() const LLVM_READONLY { return SemiLoc; }
   SourceLocation getLocEnd() const LLVM_READONLY { return SemiLoc; }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY { return SemiLoc; }
 
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == NullStmtClass;
@@ -628,6 +633,7 @@ public:
 
   SourceLocation getLocStart() const LLVM_READONLY { return LBraceLoc; }
   SourceLocation getLocEnd() const LLVM_READONLY { return RBraceLoc; }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY { return RBraceLoc; }
 
   SourceLocation getLBracLoc() const { return LBraceLoc; }
   SourceLocation getRBracLoc() const { return RBraceLoc; }
@@ -945,6 +951,12 @@ public:
     else
       return SubExprs[THEN]->getLocEnd();
   }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY {
+    if (SubExprs[ELSE] != nullptr)
+      return SubExprs[ELSE]->getStmtLocEnd();
+    else
+      return SubExprs[THEN]->getStmtLocEnd();
+  }
 
   // Iterators over subexpressions.  The iterators will include iterating
   // over the initialization expression referenced by the condition variable.
@@ -1091,6 +1103,9 @@ public:
   SourceLocation getLocEnd() const LLVM_READONLY {
     return SubExprs[BODY]->getLocEnd();
   }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY {
+    return SubExprs[BODY]->getStmtLocEnd();
+  }
 
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == WhileStmtClass;
@@ -1110,11 +1125,12 @@ class DoStmt : public Stmt {
   Stmt* SubExprs[END_EXPR];
   SourceLocation WhileLoc;
   SourceLocation RParenLoc;  // Location of final ')' in do stmt condition.
+  SourceLocation SemiLoc;
 
 public:
   DoStmt(Stmt *body, Expr *cond, SourceLocation DL, SourceLocation WL,
-         SourceLocation RP)
-    : Stmt(DoStmtClass), DoLoc(DL), WhileLoc(WL), RParenLoc(RP) {
+         SourceLocation RP, SourceLocation SL = SourceLocation())
+    : Stmt(DoStmtClass), DoLoc(DL), WhileLoc(WL), RParenLoc(RP), SemiLoc(SL) {
     SubExprs[COND] = reinterpret_cast<Stmt*>(cond);
     SubExprs[BODY] = body;
   }
@@ -1137,8 +1153,12 @@ public:
   SourceLocation getRParenLoc() const { return RParenLoc; }
   void setRParenLoc(SourceLocation L) { RParenLoc = L; }
 
+  SourceLocation getSemiLoc() const { return SemiLoc; }
+  void setSemiLoc(SourceLocation L) { SemiLoc = L; }
+
   SourceLocation getLocStart() const LLVM_READONLY { return DoLoc; }
   SourceLocation getLocEnd() const LLVM_READONLY { return RParenLoc; }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY { return SemiLoc; }
 
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == DoStmtClass;
@@ -1213,6 +1233,9 @@ public:
   SourceLocation getLocEnd() const LLVM_READONLY {
     return SubExprs[BODY]->getLocEnd();
   }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY {
+    return SubExprs[BODY]->getStmtLocEnd();
+  }
 
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == ForStmtClass;
@@ -1370,18 +1393,22 @@ public:
 ///
 class ReturnStmt : public Stmt {
   SourceLocation RetLoc;
+  SourceLocation SemiLoc;
   Stmt *RetExpr;
   const VarDecl *NRVOCandidate;
 
 public:
-  explicit ReturnStmt(SourceLocation RL) : ReturnStmt(RL, nullptr, nullptr) {}
+  explicit ReturnStmt(SourceLocation RL, SourceLocation SL = SourceLocation())
+      : ReturnStmt(RL, nullptr, nullptr, SL) {}
 
-  ReturnStmt(SourceLocation RL, Expr *E, const VarDecl *NRVOCandidate)
-      : Stmt(ReturnStmtClass), RetLoc(RL), RetExpr((Stmt *)E),
+  ReturnStmt(SourceLocation RL, Expr *E, const VarDecl *NRVOCandidate,
+             SourceLocation SL = SourceLocation())
+      : Stmt(ReturnStmtClass), RetLoc(RL), SemiLoc(SL), RetExpr((Stmt *)E),
         NRVOCandidate(NRVOCandidate) {}
 
   /// \brief Build an empty return expression.
-  explicit ReturnStmt(EmptyShell Empty) : Stmt(ReturnStmtClass, Empty) { }
+  explicit ReturnStmt(EmptyShell Empty, SourceLocation SL = SourceLocation())
+      : Stmt(ReturnStmtClass, Empty), SemiLoc(SL) { }
 
   const Expr *getRetValue() const;
   Expr *getRetValue();
@@ -1402,6 +1429,9 @@ public:
   SourceLocation getLocEnd() const LLVM_READONLY {
     return RetExpr ? RetExpr->getLocEnd() : RetLoc;
   }
+  SourceLocation getStmtLocEnd() const LLVM_READONLY {
+    return SemiLoc;
+  }
 
   static bool classof(const Stmt *T) {
     return T->getStmtClass() == ReturnStmtClass;
diff --git a/include/clang/Parse/Parser.h b/include/clang/Parse/Parser.h
index fe15902..2e01248 100644
--- a/include/clang/Parse/Parser.h
+++ b/include/clang/Parse/Parser.h
@@ -771,14 +771,16 @@ private:
   /// returned.
   bool ExpectAndConsume(tok::TokenKind ExpectedTok,
                         unsigned Diag = diag::err_expected,
-                        StringRef DiagMsg = "");
+                        StringRef DiagMsg = "",
+                        SourceLocation* PtrLoc = nullptr);
 
   /// \brief The parser expects a semicolon and, if present, will consume it.
   ///
   /// If the next token is not a semicolon, this emits the specified diagnostic,
   /// or, if there's just some closing-delimiter noise (e.g., ')' or ']') prior
   /// to the semicolon, consumes that extra token.
-  bool ExpectAndConsumeSemi(unsigned DiagID);
+  bool ExpectAndConsumeSemi(unsigned DiagID,
+                            SourceLocation* PtrSemiLoc = nullptr);
 
   /// \brief The kind of extra semi diagnostic to emit.
   enum ExtraSemiKind {
diff --git a/include/clang/Sema/Sema.h b/include/clang/Sema/Sema.h
index 63d0784..6fe5225 100644
--- a/include/clang/Sema/Sema.h
+++ b/include/clang/Sema/Sema.h
@@ -3442,7 +3442,8 @@ public:
     return FullExprArg(FE.get());
   }
 
-  StmtResult ActOnExprStmt(ExprResult Arg);
+  StmtResult ActOnExprStmt(ExprResult Arg,
+                           SourceLocation SemiLoc = SourceLocation());
   StmtResult ActOnExprStmtError();
 
   StmtResult ActOnNullStmt(SourceLocation SemiLoc,
@@ -3518,7 +3519,8 @@ public:
                             Stmt *Body);
   StmtResult ActOnDoStmt(SourceLocation DoLoc, Stmt *Body,
                          SourceLocation WhileLoc, SourceLocation CondLParen,
-                         Expr *Cond, SourceLocation CondRParen);
+                         Expr *Cond, SourceLocation CondRParen,
+                         SourceLocation SemiLoc = SourceLocation());
 
   StmtResult ActOnForStmt(SourceLocation ForLoc,
                           SourceLocation LParenLoc,
@@ -3587,8 +3589,10 @@ public:
                               bool AllowParamOrMoveConstructible);
 
   StmtResult ActOnReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp,
-                             Scope *CurScope);
-  StmtResult BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp);
+                             Scope *CurScope,
+                             SourceLocation SemiLoc = SourceLocation());
+  StmtResult BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp,
+                             SourceLocation SemiLoc = SourceLocation());
   StmtResult ActOnCapScopeReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp);
 
   StmtResult ActOnGCCAsmStmt(SourceLocation AsmLoc, bool IsSimple,
@@ -5028,7 +5032,8 @@ public:
   ExprResult ActOnFinishFullExpr(Expr *Expr, SourceLocation CC,
                                  bool DiscardedValue = false,
                                  bool IsConstexpr = false,
-                                 bool IsLambdaInitCaptureInitializer = false);
+                                 bool IsLambdaInitCaptureInitializer = false,
+                                 SourceLocation SemiLoc = SourceLocation());
   StmtResult ActOnFinishFullStmt(Stmt *Stmt);
 
   // Marks SS invalid if it represents an incomplete type.
diff --git a/lib/AST/Stmt.cpp b/lib/AST/Stmt.cpp
index 697cdc3..4a6504f 100644
--- a/lib/AST/Stmt.cpp
+++ b/lib/AST/Stmt.cpp
@@ -279,6 +279,22 @@ SourceLocation Stmt::getLocEnd() const {
   llvm_unreachable("unknown statement kind");
 }
 
+SourceLocation Stmt::getStmtLocEnd() const {
+  switch (getStmtClass()) {
+  case Stmt::NoStmtClass: llvm_unreachable("statement without class");
+  // I don't bother implementing all getStmtLocEnd, so I don't put the check in
+  // check_implementations
+#define ABSTRACT_STMT(type)
+#define STMT(type, base) \
+  case Stmt::type##Class: \
+    if (&Stmt::getStmtLocEnd == &type::getStmtLocEnd) \
+      llvm_unreachable(#type "::getStmtLocEnd is yet implemented"); \
+    return static_cast<const type*>(this)->getStmtLocEnd();
+#include "clang/AST/StmtNodes.inc"
+  }
+  llvm_unreachable("unknown statement kind");
+}
+
 CompoundStmt::CompoundStmt(const ASTContext &C, ArrayRef<Stmt*> Stmts,
                            SourceLocation LB, SourceLocation RB)
   : Stmt(CompoundStmtClass), LBraceLoc(LB), RBraceLoc(RB) {
diff --git a/lib/Parse/ParseStmt.cpp b/lib/Parse/ParseStmt.cpp
index 30e392f..dd12d34 100644
--- a/lib/Parse/ParseStmt.cpp
+++ b/lib/Parse/ParseStmt.cpp
@@ -422,8 +422,9 @@ StmtResult Parser::ParseExprStatement() {
   }
 
   // Otherwise, eat the semicolon.
-  ExpectAndConsumeSemi(diag::err_expected_semi_after_expr);
-  return Actions.ActOnExprStmt(Expr);
+  SourceLocation SemiLoc;
+  ExpectAndConsumeSemi(diag::err_expected_semi_after_expr, &SemiLoc);
+  return Actions.ActOnExprStmt(Expr, SemiLoc);
 }
 
 /// ParseSEHTryBlockCommon
@@ -1467,8 +1468,11 @@ StmtResult Parser::ParseDoStatement() {
   if (Cond.isInvalid() || Body.isInvalid())
     return StmtError();
 
+  assert(Tok.is(tok::semi));
+
   return Actions.ActOnDoStmt(DoLoc, Body.get(), WhileLoc, T.getOpenLocation(),
-                             Cond.get(), T.getCloseLocation());
+                             Cond.get(), T.getCloseLocation(),
+                             Tok.getLocation());
 }
 
 bool Parser::isForRangeIdentifier() {
@@ -1897,9 +1901,13 @@ StmtResult Parser::ParseReturnStatement() {
       return StmtError();
     }
   }
+
+  assert(Tok.is(tok::semi));
+  SourceLocation SemiLoc = Tok.getLocation();
+
   if (IsCoreturn)
     return Actions.ActOnCoreturnStmt(ReturnLoc, R.get());
-  return Actions.ActOnReturnStmt(ReturnLoc, R.get(), getCurScope());
+  return Actions.ActOnReturnStmt(ReturnLoc, R.get(), getCurScope(), SemiLoc);
 }
 
 StmtResult Parser::ParsePragmaLoopHint(StmtVector &Stmts,
diff --git a/lib/Parse/Parser.cpp b/lib/Parse/Parser.cpp
index 52e5194..4d1f53e 100644
--- a/lib/Parse/Parser.cpp
+++ b/lib/Parse/Parser.cpp
@@ -127,8 +127,11 @@ static bool IsCommonTypo(tok::TokenKind ExpectedTok, const Token &Tok) {
 }
 
 bool Parser::ExpectAndConsume(tok::TokenKind ExpectedTok, unsigned DiagID,
-                              StringRef Msg) {
+                              StringRef Msg, SourceLocation* PtrLoc) {
   if (Tok.is(ExpectedTok) || Tok.is(tok::code_completion)) {
+    // Save the location of consumed token
+    if (PtrLoc != nullptr)
+      *PtrLoc = Tok.getLocation();
     ConsumeAnyToken();
     return false;
   }
@@ -172,8 +175,14 @@ bool Parser::ExpectAndConsume(tok::TokenKind ExpectedTok, unsigned DiagID,
   return true;
 }
 
-bool Parser::ExpectAndConsumeSemi(unsigned DiagID) {
-  if (TryConsumeToken(tok::semi))
+bool Parser::ExpectAndConsumeSemi(unsigned DiagID, SourceLocation* PtrSemiLoc) {
+  bool TryRes;
+  if (PtrSemiLoc != nullptr)
+    TryRes = TryConsumeToken(tok::semi, *PtrSemiLoc);
+  else
+    TryRes = TryConsumeToken(tok::semi);
+
+  if (TryRes)
     return false;
 
   if (Tok.is(tok::code_completion)) {
@@ -191,7 +200,7 @@ bool Parser::ExpectAndConsumeSemi(unsigned DiagID) {
     return false;
   }
   
-  return ExpectAndConsume(tok::semi, DiagID);
+  return ExpectAndConsume(tok::semi, DiagID, "", PtrSemiLoc);
 }
 
 void Parser::ConsumeExtraSemi(ExtraSemiKind Kind, unsigned TST) {
diff --git a/lib/Sema/SemaExprCXX.cpp b/lib/Sema/SemaExprCXX.cpp
index 3afa95f..e5be0d0 100644
--- a/lib/Sema/SemaExprCXX.cpp
+++ b/lib/Sema/SemaExprCXX.cpp
@@ -7309,7 +7309,8 @@ Sema::CorrectDelayedTyposInExpr(Expr *E, VarDecl *InitDecl,
 ExprResult Sema::ActOnFinishFullExpr(Expr *FE, SourceLocation CC,
                                      bool DiscardedValue,
                                      bool IsConstexpr,
-                                     bool IsLambdaInitCaptureInitializer) {
+                                     bool IsLambdaInitCaptureInitializer,
+                                     SourceLocation SemiLoc) {
   ExprResult FullExpr = FE;
 
   if (!FullExpr.get())
@@ -7412,6 +7413,7 @@ ExprResult Sema::ActOnFinishFullExpr(Expr *FE, SourceLocation CC,
       CurrentLSI->hasPotentialCaptures() && !FullExpr.isInvalid())
     CheckIfAnyEnclosingLambdasMustCaptureAnyPotentialCaptures(FE, CurrentLSI,
                                                               *this);
+  FullExpr.get()->setSemiLoc(SemiLoc);
   return MaybeCreateExprWithCleanups(FullExpr);
 }
 
diff --git a/lib/Sema/SemaStmt.cpp b/lib/Sema/SemaStmt.cpp
index 390e1b5..9e0affc 100644
--- a/lib/Sema/SemaStmt.cpp
+++ b/lib/Sema/SemaStmt.cpp
@@ -41,12 +41,15 @@
 using namespace clang;
 using namespace sema;
 
-StmtResult Sema::ActOnExprStmt(ExprResult FE) {
+StmtResult Sema::ActOnExprStmt(ExprResult FE, SourceLocation SemiLoc) {
   if (FE.isInvalid())
     return StmtError();
 
   FE = ActOnFinishFullExpr(FE.get(), FE.get()->getExprLoc(),
-                           /*DiscardedValue*/ true);
+                           /*DiscardedValue*/ true,
+                           /*IsConstexpr*/ false,
+                           /*IsLambdaInitCaptureInitializer*/ false,
+                           SemiLoc);
   if (FE.isInvalid())
     return StmtError();
 
@@ -1257,7 +1260,8 @@ StmtResult Sema::ActOnWhileStmt(SourceLocation WhileLoc, ConditionResult Cond,
 StmtResult
 Sema::ActOnDoStmt(SourceLocation DoLoc, Stmt *Body,
                   SourceLocation WhileLoc, SourceLocation CondLParen,
-                  Expr *Cond, SourceLocation CondRParen) {
+                  Expr *Cond, SourceLocation CondRParen,
+                  SourceLocation SemiLoc) {
   assert(Cond && "ActOnDoStmt(): missing expression");
 
   CheckBreakContinueBinding(Cond);
@@ -1273,7 +1277,7 @@ Sema::ActOnDoStmt(SourceLocation DoLoc, Stmt *Body,
 
   DiagnoseUnusedExprResult(Body);
 
-  return new (Context) DoStmt(Body, Cond, DoLoc, WhileLoc, CondRParen);
+  return new (Context) DoStmt(Body, Cond, DoLoc, WhileLoc, CondRParen, SemiLoc);
 }
 
 namespace {
@@ -3156,8 +3160,8 @@ bool Sema::DeduceFunctionTypeFromReturnExpr(FunctionDecl *FD,
 
 StmtResult
 Sema::ActOnReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp,
-                      Scope *CurScope) {
-  StmtResult R = BuildReturnStmt(ReturnLoc, RetValExp);
+                      Scope *CurScope, SourceLocation SemiLoc) {
+  StmtResult R = BuildReturnStmt(ReturnLoc, RetValExp, SemiLoc);
   if (R.isInvalid() || ExprEvalContexts.back().Context == DiscardedStatement)
     return R;
 
@@ -3173,7 +3177,8 @@ Sema::ActOnReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp,
   return R;
 }
 
-StmtResult Sema::BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp) {
+StmtResult Sema::BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp,
+                                 SourceLocation SemiLoc) {
   // Check for unexpanded parameter packs.
   if (RetValExp && DiagnoseUnexpandedParameterPack(RetValExp))
     return StmtError();
@@ -3222,7 +3227,7 @@ StmtResult Sema::BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp) {
         return StmtError();
       RetValExp = ER.get();
     }
-    return new (Context) ReturnStmt(ReturnLoc, RetValExp, nullptr);
+    return new (Context) ReturnStmt(ReturnLoc, RetValExp, nullptr, SemiLoc);
   }
 
   // FIXME: Add a flag to the ScopeInfo to indicate whether we're performing
@@ -3317,7 +3322,7 @@ StmtResult Sema::BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp) {
       }
     }
 
-    Result = new (Context) ReturnStmt(ReturnLoc, RetValExp, nullptr);
+    Result = new (Context) ReturnStmt(ReturnLoc, RetValExp, nullptr, SemiLoc);
   } else if (!RetValExp && !HasDependentReturnType) {
     FunctionDecl *FD = getCurFunctionDecl();
 
@@ -3339,7 +3344,7 @@ StmtResult Sema::BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp) {
     else
       Diag(ReturnLoc, DiagID) << getCurMethodDecl()->getDeclName() << 1/*meth*/;
 
-    Result = new (Context) ReturnStmt(ReturnLoc);
+    Result = new (Context) ReturnStmt(ReturnLoc, SemiLoc);
   } else {
     assert(RetValExp || HasDependentReturnType);
     const VarDecl *NRVOCandidate = nullptr;
@@ -3392,7 +3397,7 @@ StmtResult Sema::BuildReturnStmt(SourceLocation ReturnLoc, Expr *RetValExp) {
         return StmtError();
       RetValExp = ER.get();
     }
-    Result = new (Context) ReturnStmt(ReturnLoc, RetValExp, NRVOCandidate);
+    Result = new (Context) ReturnStmt(ReturnLoc, RetValExp, NRVOCandidate, SemiLoc);
   }
 
   // If we need to check for the named return value optimization, save the
